<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>QJM Simulation UI</title>
  <link href="https://cdn.jsdelivr.net/npm/daisyui@4.11.1/dist/full.min.css" rel="stylesheet" type="text/css" />
  <link rel="stylesheet" href="node_modules/modern-normalize/modern-normalize.css">
  <style>
    .draggable {
      cursor: grab;
    }
    .droppable {
      border: 2px dashed #ccc;
      padding: 10px;
      min-height: 100px;
    }
    .accepts-drop {
      border: 2px dashed #15803d;
    }
    .factions-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 10px;
    }
  </style>
</head>
<body onload="init()">

<div class="md:container md:mx-auto">
  <div role="tablist" class="tabs tabs-bordered">
    <input type="radio" name="qjm_steps" role="tab" class="tab" aria-label="A. Attacking & Defending Units" checked/>
    <div role="tabpanel" class="tab-content p-10">
      <h2 class="mb-4 text-2xl font-extrabold leading-none tracking-tight text-gray-900 dark:text-white pt-4">Available Units</h2>
      <div id="factions" class="factions-grid"></div>
      <h2 class="mb-4 text-2xl font-extrabold leading-none tracking-tight text-gray-900 dark:text-white pt-4">Units in Combat</h2>
      <div class="container px-4 grid grid-cols-2">
        <div id="attackers" class="droppable m-4 flex-auto">Attackers</div>
        <div id="defenders" class="droppable m-4 flex-auto">Defenders</div>
      </div>
    </div>

    <input type="radio" name="qjm_steps" role="tab" class="tab" aria-label="B. Air Support Sorties" />
    <div role="tabpanel" class="tab-content p-10">
      <h2 class="mb-4 text-2xl font-extrabold leading-none tracking-tight text-gray-900 dark:text-white pt-4">Available Aircraft</h2>
      <div id="air_factions" class="factions-grid"></div>
      <h2 class="mb-4 text-2xl font-extrabold leading-none tracking-tight text-gray-900 dark:text-white pt-4">Units in Combat</h2>
      <div class="container px-4 grid grid-cols-2">
        <div id="air_attackers" class="droppable m-4 flex-auto">Attackers</div>
        <div id="air_defenders" class="droppable m-4 flex-auto">Defenders</div>
      </div>
    </div>

    <input type="radio" name="qjm_steps" role="tab" class="tab" aria-label="C. Environmental Variables" />
    <div role="tabpanel" class="tab-content p-10">
      <h2 class="mb-4 text-2xl font-extrabold leading-none tracking-tight text-gray-900 dark:text-white pt-4">Battle Environment Factors</h2>
      <label class="form-control w-full max-w-md">
        <div class="label">
          <span class="label-text">Terrain Type:</span>
        </div>
        <select class="select select-bordered" id="terrain">
          <option>Rugged - Heavily Wooded</option>
          <option>Rugged - Mixed</option>
          <option>Rugged - Bare</option>
          <option>Rolling- Heavily Wooded</option>
          <option>Rolling - Mixed</option>
          <option>Rolling - Bare</option>
          <option>Flat - Heavily Wooded</option>
          <option>Flat - Mixed</option>
          <option>Flat - Bare, hard</option>
          <option>Flat Desert</option>
          <option>Rolling Dunes</option>
          <option>Swamp - Jungled</option>
          <option>Swamp - mixed or open</option>
          <option>Urban</option>
        </select>
      </label>
      <label class="form-control w-full max-w-md">
        <div class="label">
          <span class="label-text">Season:</span>
        </div>
        <select class="select select-bordered" id="Season">
          <optgroup label="Temperate">
            <option>Spring - Temperate</option>
            <option>Summer - Temperature</option>
            <option>Fall - Temperate</option>
            <option>Winter - Temperate</option>
          </optgroup>
          <optgroup label="Desert">
            <option>Spring - Desert</option>
            <option>Summer - Desert</option>
            <option>Fall - Desert</option>
            <option>Winter - Desert</option>
          </optgroup>
          <optgroup label="Jungle">
            <option>Spring - Jungle</option>
            <option>Summer - Jungle</option>
            <option>Fall - Jungle</option>
            <option>Winter - Jungle</option>
          </optgroup>
        </select>
      </label>
      <label class="form-control w-full max-w-md">
        <div class="label">
          <span class="label-text">Weather:</span>
        </div>
        <select class="select select-bordered" id="weather">
          <option>Dry - Sunshine- Extreme Heat</option>
          <option>Dry - Sunshine - Temperate</option>
          <option>Dry - Sunshine - Extreme Cold</option>
          <option>Dry - Overcast - Extreme Heat</option>
          <option>Dry - Overcast - Temperate</option>
          <option>Dry - Overcast - Extreme Cold</option>
          <option>Wet - Light - Extreme Heat</option>
          <option>Wet - Light - Temperate</option>
          <option>Wet - Light - Extreme Cold</option>
          <option>Wet - Heavy - Extreme Heat</option>
          <option>Wet - Heavy - Temperate</option>
          <option>Wet - Heavy - Extreme Cold</option>
        </select>
      </label>
      <label class="form-control w-full max-w-md">
        <div class="label">
          <span class="label-text">River:</span>
        </div>
        <select class="select select-bordered" id="riverObstacle">
          <option>No</option>
          <optgroup label="Fordable">
            <option>Fordable (20 m)</option>
            <option>Fordable (50 m)</option>
            <option>Fordable (100 m)</option>
            <option>Fordable (500 m)</option>
          </optgroup>
          <optgroup label="Unfordable">
            <option>Unfordable (20 m)</option>
            <option>Unfordable (50 m)</option>
            <option>Unfordable (100 m)</option>
            <option>Unfordable (500 m)</option>
          </optgroup>
        </select>
      </label>
      <label class="form-control w-full max-w-md">
        <div class="label">
          <span class="label-text">Minefield (density/km of front):</span>
        </div>
        <select class="select select-bordered" id="mineObstacle">
          <option>No</option>
          <option>10</option>
          <option>20</option>
          <option>50</option>
          <option>100</option>
          <option>500</option>
        </select>
      </label>
      <label class="form-control w-full max-w-md">
        <div class="label">
          <span class="label-text">Shoreline Fires:</span>
        </div>
        <select class="select select-bordered" id="shorelineFires">
          <option>No shoreline</option>
          <option>Small Arms (up to 1,000 m from shore)</option>
          <option>Light Artillery (up to 10,000 m from shore)</option>
          <option>Medium Artillery (up to 15,000 m from shore)</option>
        </select>
      </label>
      <label class="form-control w-full max-w-md">
        <div class="label">
          <span class="label-text">Shoreline Type:</span>
        </div>
        <select class="select select-bordered" id="shorelineType">
          <option>No shoreline</option>
          <option>Across Beach</option>
          <option>Across Major Unfordable River</option>
          <option>Across Major Fordable or Minor Unfordable River</option>
        </select>
      </label>
    </div>

    <input type="radio" name="qjm_steps" role="tab" class="tab" aria-label="D. Force Variables" />
    <div role="tabpanel" class="tab-content p-10">
      <h2 class="mb-4 text-2xl font-extrabold leading-none tracking-tight text-gray-900 dark:text-white pt-4">Force Variables</h2>
      <label class="form-control w-full max-w-md">
        <div class="label">
          <span class="label-text">Defender Posture:</span>
        </div>
        <select class="select select-bordered" id="posture">
          <option>Hasty Defense</option>
          <option>Prepared Defense</option>
          <option>Fortified Defense</option>
          <option>Delay</option>
          <option>Withdrawal</option>
          <option>Meeting Engagement</option>
        </select>
      </label>
      <div class="w-full max-w-md inline-flex">
        <label class="form-control">
        <div class="label">
          <span class="label-text">Defender Frontage (km):</span>
        </div>
        <input type="number" id="defFrontage" min="1" max="5000" value="1" class="input input-bordered max-w-32" onchange="getPersonnelCount()"/>
      </label>
      <div class="flex w-full max-w-16"></div>
      <label class="form-control">
      <div class="label">
        <span class="label-text">Defender Density:</span>
      </div>
      <input id="defDensity" class="input input-bordered max-w-32" disabled />
    </label>
      </div>
      <label class="form-control w-full max-w-md">
        <div class="label">
          <span class="label-text">Attacker Air Situation:</span>
        </div>
        <select class="select select-bordered" id="airsuperiority">
          <option>Air Superiority</option>
          <option>Air Parity</option>
          <option>Air Inferiority</option>
        </select>
      </label>
      <label class="form-control w-full max-w-md">
        <div class="label">
          <span class="label-text">Attacker Level of Surprise:</span>
        </div>
        <select class="select select-bordered" id="atksurprise">
          <option>No Surprise</option>
          <option>Minor Surprise</option>
          <option>Substantial Surprise</option>
          <option>Complete Surprise</option>
        </select>
      </label>
      <label class="form-control w-full max-w-md">
        <div class="label">
          <span class="label-text">Attacker Days Since Surprise:</span>
        </div>
        <input type="range" min="0" max="3" value="0" class="range" step="1" id="atksurprisedays" />
        <div class="w-full flex justify-between text-xs px-2">
          <span>0</span>
          <span>1</span>
          <span>2</span>
          <span>3+</span>
        </div>
      </label>
      <label class="form-control w-full max-w-md">
        <div class="label">
          <span class="label-text">Attacker CEV Adjustment:</span>
          <span class="label-text" id="atkcevdisplay">1.0</span>
        </div>
        <input type="range" min="0" max="2" value="1" class="range" step="0.1" id="atkcev" onchange="updateCevDisplay()" />
        <div class="w-full flex justify-between text-xs px-2">
          <span>0.0</span>
          <span>0.5</span>
          <span>1.0</span>
          <span>1.5</span>
          <span>2.0</span>
        </div>
      </label>
      <label class="form-control w-full max-w-md">
        <div class="label">
          <span class="label-text">Defender CEV Adjustment:</span>
          <span class="label-text" id="defcevdisplay">1.0</span>
        </div>
        <input type="range" min="0" max="2" value="1" class="range" step="0.1" id="defcev" onchange="updateCevDisplay()" />
        <div class="w-full flex justify-between text-xs px-2">
          <span>0.0</span>
          <span>0.5</span>
          <span>1.0</span>
          <span>1.5</span>
          <span>2.0</span>
        </div>
      </label>
    </div>

    <input type="radio" name="qjm_steps" role="tab" class="tab" aria-label="E. Operational Variables" />
    <div role="tabpanel" class="tab-content p-10">
      <label class="form-control w-full max-w-md">
        <div class="label">
          <span class="label-text">Road Quality:</span>
        </div>
        <input type="range" min="0.6" max="1" value="1" class="range" step="0.1" id="roadQuality" />
        <div class="w-full flex justify-between text-xs px-2">
          <span>Poor</span>
          <span>Mediocre</span>
          <span>Good</span>
        </div>
      </label>
      <label class="form-control w-full max-w-md">
        <div class="label">
          <span class="label-text">Road Density:</span>
        </div>
        <input type="range" min="0.6" max="1" value="1" class="range" step="0.1" id="roadDensity" />
        <div class="w-full flex justify-between text-xs px-2">
          <span>Sparse</span>
          <span>Moderate</span>
          <span>Good</span>
        </div>
      </label>
      <div class="w-full flex justify-between text-xs">
        <button class="btn btn-success m-2" onclick="sendData();battleResultsModal.showModal()">Simulate</button>
      </div>
    </div>
  </div>
  
  <label class="form-control w-full max-w-md">
    <div class="label">
      <span class="label-text">Date:</span>
    </div>
    <input type="date" id="battle_date" class="input input-bordered" />
  </label>
</div>
<!-- Formation data modal -->
<dialog id="formationModal" class="modal">
  <div class="modal-box w-11/12 max-w-5xl">
    <h3 class="text-lg font-bold mb-4">Formation Details</h3>
    <div id="formationDetails" class="space-y-2">
      <!-- Formation details will be populated here -->
    </div>
    <div class="flex justify-end mt-4">
      <form method="dialog">
        <button id="saveChanges" class="btn btn-success">Save Changes</button>
        <button id="closeModal" class="btn btn-neutral ml-2">Close</button>
      </form>
    </div>
  </div>
</dialog>

<!-- Battle data modal -->
<dialog id="battleResultsModal" class="modal">
  <div class="modal-box w-11/12 max-w-5xl">
    <h3 class="text-lg font-bold mb-4">Battle Results</h3>
    <div id="battleResultsContent" class="space-y-2">
      <!-- Formation details will be populated here -->
    </div>
    <div class="flex justify-end mt-4">
      <form method="dialog">
        <button id="saveChanges" class="btn btn-success" onclick="sendData(true)">Commit Results</button>
        <button id="closeModal" class="btn btn-failure ml-2">Cancel</button>
      </form>
    </div>
  </div>
</dialog>


<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>
<script>
  function init() {
    populateUnits();
    populateAirUnits();
    setupDragDrop();
  }
  const factionsContainer = document.getElementById('factions');
  const airFactionsContainer = document.getElementById('air_factions');
  var draggable = false;
  function addDragEventListeners(unitDiv) {
  unitDiv.addEventListener('dragstart', (e) => {
    e.dataTransfer.setData('text', e.target.dataset.unitId);
  });
  unitDiv.addEventListener('dragend', (e) => {
    const data = e.dataTransfer.getData('text');
    //const draggedUnit = document.querySelector('.draggable[data-unit-id={$data}]');
    if (!draggable) {
      const draggableUnits = document.querySelectorAll('.draggable');
      draggableUnits.forEach(unit => {
        if (unit.dataset.unitId === data) {
          // Find the original parent based on the dataset
          const originalParentName = unit.dataset.originalParent;
          const originalParents = Array.from(factionsContainer.children).concat(Array.from(airFactionsContainer.children));
          const originalParentDiv = originalParents.find(div => div.querySelector('h3').textContent === originalParentName);
          if (originalParentDiv) {
            originalParentDiv.appendChild(unit);
          }
        }
      });
    }
    draggable = false;
    // reset all droppable styles
    document.querySelectorAll('.droppable').forEach(drop => {
      drop.classList.remove('accepts-drop');
    });
  });
}

function populateUnits() {
  fetch('/qjm/get_units')
    .then(response => response.json())
    .then(data => {
      const factions = data;

      factions.forEach(faction => {
        const factionDiv = document.createElement('div');
        factionDiv.innerHTML = `<h3>${faction.name}</h3>`;
        factionDiv.className = 'font-extrabold grid-cols-1';
        faction.units.forEach(unit => {
          const unitDiv = createUnitDiv(unit, faction.name);
          factionDiv.appendChild(unitDiv);
        });
        factionsContainer.appendChild(factionDiv);
      });
    })
    .catch(error => console.error('Error fetching units:', error));
}


function populateAirUnits() {
  const factions = [
    { name: 'Faction 1', units: [
      {'id': '7', 'name': 'MiG-21PFM (2x S-13)', 'sidc': '30030100001101040000'}, 
      {'id': '8', 'name': 'Su-25 (6x FAB-100)', 'sidc': '30030100001101020000'}
    ]},
    { name: 'Faction 2', units: [
      {'id': '9', 'name': 'MiG-21PFM (4x S-5)', 'sidc': '30030100001101040000'}, 
      {'id': '10', 'name': 'Su-25 (4x FAB-100, 2x S-25)', 'sidc': '30030100001101020000'}
    ]},
    { name: 'Faction 3', units: [
      {'id': '11', 'name': 'MiG-21PFM (2x S-8)', 'sidc': '30030100001101040000'}, 
      {'id': '12', 'name': 'Su-25 (4x FAB-250)', 'sidc': '30030100001101020000'}
    ]}
  ];

  factions.forEach(faction => {
    const factionDiv = document.createElement('div');
    factionDiv.innerHTML = `<h3>${faction.name} (Air)</h3>`;
    factionDiv.className = 'font-extrabold grid-cols-1';
    faction.units.forEach(unit => {
      const unitDiv = createUnitDiv(unit, `${faction.name} (Air)`, true);
      factionDiv.appendChild(unitDiv);
    });
    airFactionsContainer.appendChild(factionDiv);
  });
}

function createUnitDiv(unit, factionName, isAirUnit = false) {
  const unitDiv = document.createElement('div');
  unitDiv.className = 'draggable border m-1 p-1 font-normal flex justify-between';
  unitDiv.dataset.unitId = unit.id;
  unitDiv.dataset.originalParent = factionName;
  unitDiv.draggable = true;
  var symbol = new ms.Symbol(unit.sidc, {size: 20, outlineWidth: 2, fillColor: unit.color}).asCanvas().toDataURL();
  unitDiv.innerHTML = isAirUnit
    ? `<div><img src=${symbol} style="display: inline"/> ${unit.name} </div><input class="input input-sm" type="number" value="0" size="8"></input>`
    : `<div><img src=${symbol} style="display: inline"/> ${unit.name} </div><button class="btn btn-xs m-2 justify-self-end" onclick="showFormationDetails('${unit.id}');formationModal.showModal()">More</button>`;
  addDragEventListeners(unitDiv);
  return unitDiv;
}

function setupDragDrop() {
  const droppables = document.querySelectorAll('.droppable');
  droppables.forEach(droppable => {
    droppable.addEventListener('dragover', (e) => {
      draggable = true;
      droppable.classList.add('accepts-drop');
      e.preventDefault();
    });
    droppable.addEventListener('dragenter', (e) => {
      draggable = false;
      droppable.classList.remove('accepts-drop');
      e.preventDefault();
    });
    droppable.addEventListener('dragleave', (e) => {
      draggable = false;
      droppable.classList.remove('accepts-drop');
      e.preventDefault();
    });
    droppable.addEventListener('drop', (e) => {
      e.preventDefault();
      draggable = true;
      const data = e.dataTransfer.getData('text');
      const unit = document.querySelector(`.draggable[data-unit-id="${data}"]`);
      if (unit) {
        e.target.appendChild(unit);
      }
      getPersonnelCount();
    });
  });
  const draggables = document.querySelectorAll('.d')
}

function sendData(commit=false) {
  // Collect data from inputs
  const data = {
    attackers: Array.from(document.querySelectorAll('#attackers .draggable')).map(el => el.dataset.unitId),
    defenders: Array.from(document.querySelectorAll('#defenders .draggable')).map(el => el.dataset.unitId),
    air_attackers: Array.from(document.querySelectorAll('#air_attackers .draggable')).map(el => el.dataset.unitId),
    air_defenders: Array.from(document.querySelectorAll('#air_defenders .draggable')).map(el => el.dataset.unitId),
    terrain: document.getElementById('terrain').value,
    season: document.getElementById('Season').value,
    weather: document.getElementById('weather').value,
    posture: document.getElementById('posture').value,
    defFrontage: document.getElementById('defFrontage').value,
    airsuperiority: document.getElementById('airsuperiority').value,
    atksurprise: document.getElementById('atksurprise').value,
    atksurprisedays: document.getElementById('atksurprisedays').value,
    atkcev: document.getElementById('atkcev').value,
    defcev: document.getElementById('defcev').value,
    battleDate: document.getElementById('battle_date').value,
  };

  // Send data to Flask server via AJAX
  console.log(commit)
  if (commit) {
    fetch('/commit_battle', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    })
    .then(response => response.json())
    .then(result => {
      console.log('Success:', result);
      // Handle success response
    })
    .catch(error => {
      console.error('Error:', error);
      // Handle error response
    });

  } else {
    fetch('/simulate_battle', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    })
    .then(response => response.json())
    .then(result => {
      console.log('Success:', result);
      // Handle success response
      // Populate the modal with the simulation results
      const battleResultsContent = document.getElementById('battleResultsContent');
      battleResultsContent.innerHTML = `
          <p><strong>Power Ratio:</strong> ${result.powerRatio.toFixed(2)}</p>
          <p><strong>Attacker Power:</strong> ${result.powerAtk.toLocaleString('en-US', {maximumFractionDigits:0})}</p>
          <p><strong>Defender Power:</strong> ${result.powerDef.toLocaleString('en-US', {maximumFractionDigits:0})}</p>
          <p><strong>Attacker Personnel Casualty Rate:</strong> ${(result.atkPersCasualtyRate*100).toFixed(1)}%</p>
          <p><strong>Attacker Tank Casualty Rate:</strong> ${(result.atkTankCasualtyRate*100).toFixed(1)}%</p>
          <p><strong>Defender Personnel Casualty Rate:</strong> ${(result.defPersCasualtyRate*100).toFixed(1)}%</p>
          <p><strong>Defender Tank Casualty Rate:</strong> ${(result.defTankCasualtyRate*100).toFixed(1)}%</p>
        `;
      })
    .catch(error => {
      console.error('Error:', error);
      // Handle error response
    });
  };
}

function updateCevDisplay() {
  document.getElementById('atkcevdisplay').innerText = document.getElementById('atkcev').value;
  document.getElementById('defcevdisplay').innerText = document.getElementById('defcev').value;
};

function getPersonnelCount() {
  const data = {
    attackers: Array.from(document.querySelectorAll('#attackers .draggable')).map(el => el.dataset.unitId),
    defenders: Array.from(document.querySelectorAll('#defenders .draggable')).map(el => el.dataset.unitId),
  };
  // Send data to Flask server via AJAX
  fetch('/get_personnel', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(data),
  })
  .then(response => response.json())
  .then(result => {
    console.log('Success:', result);
    // Handle success response
    // calculate the defender density
    const defFrontage = document.getElementById('defFrontage').value;
    const defDensity = result['defenders'] / (1000 * defFrontage);
    document.getElementById('defDensity').value = defDensity.toFixed(1);
  })
  .catch(error => {
    console.error('Error:', error);
    // Handle error response
  });
}

function showFormationDetails(unitId) {
  // Fetch the formation data from the server or use a preloaded JavaScript object
  fetch(`/get_formation/${unitId}`)
    .then(response => response.json())
    .then(data => {
      const formationDetails = document.getElementById('formationDetails');
      formationDetails.innerHTML = ''; // Clear existing details

      // Populate the modal with formation data
      const nameDiv = document.createElement('div');
      nameDiv.innerHTML = `<strong>Name:</strong> <input type="text" value="${data.name}" id="formationName" class="input input-bordered w-full"/>`;
      formationDetails.appendChild(nameDiv);

      const factionDiv = document.createElement('div');
      factionDiv.innerHTML = `<strong>Faction:</strong> <input type="text" value="${data.faction}" id="formationFaction" class="input input-bordered w-full"/>`;
      formationDetails.appendChild(factionDiv);

      const personnelDiv = document.createElement('div');
      personnelDiv.innerHTML = `<strong>Personnel:</strong> <input type="number" value="${data.personnel}" id="formationPersonnel" class="input input-bordered w-full" disabled/>`;
      formationDetails.appendChild(personnelDiv);

      const oliDiv = document.createElement('div');
      oliDiv.innerHTML = `<strong>OLI:</strong> <input type="number" value="${data.oli.toFixed(0)}" id="formationOLI" class="input input-bordered w-full" disabled/>`;
      formationDetails.appendChild(oliDiv);

      // Create the equipment table
      const tableDiv = document.createElement('div');
      tableDiv.className = 'overflow-x-auto';
      const table = document.createElement('table');
      table.className = 'table table-compact w-full';

      // Create the table header with rotated labels
      const thead = document.createElement('thead');
      thead.innerHTML = `
        <tr>
          <th></th> <!-- Empty corner cell -->
          <th class=""><span class="block">Allocated</span></th>
          <th class=""><span class="block">Active</span></th>
          <th class=""><span class="block">Damaged</span></th>
          <th class=""><span class="block">Destroyed</span></th>
        </tr>`;
      table.appendChild(thead);

      // Create the table body with equipment rows
      const tbody = document.createElement('tbody');
      for (const equip in data.equipment) {
        const status = data.equipment[equip];
        console.log(status)
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${equip}</td>
          <td><input type="number" value="${status['Allocated']}" class="input input-sm input-bordered w-full text-center" /></td>
          <td><input type="number" value="${status['Active']}" class="input input-sm input-bordered w-full text-center" /></td>
          <td><input type="number" value="${status['Damaged']}" class="input input-sm input-bordered w-full text-center" /></td>
          <td><input type="number" value="${status['Destroyed']}" class="input input-sm input-bordered w-full text-center" /></td>`;
        tbody.appendChild(row);
      }
      table.appendChild(tbody);

      tableDiv.appendChild(table);
      formationDetails.appendChild(tableDiv);

      // Show the modal
      document.getElementById('formationModal').classList.remove('hidden');
    })
    .catch(error => console.error('Error fetching formation details:', error));
}

document.getElementById('saveChanges').addEventListener('click', () => {
  // Gather updated formation data and send it to the server
  const updatedData = {
    name: document.getElementById('formationName').value,
    faction: document.getElementById('formationFaction').value,
    personnel: document.getElementById('formationPersonnel').value,
    equipment: {}
  };

  // Get all rows of the equipment table
  const equipmentRows = document.querySelectorAll('#formationDetails table tbody tr');
  
  equipmentRows.forEach(row => {
    const equipmentType = row.children[0].textContent; // Get the equipment type (first cell)
    
    // Gather the input values (allocated, active, damaged, destroyed)
    const allocated = row.children[1].querySelector('input').value;
    const active = row.children[2].querySelector('input').value;
    const damaged = row.children[3].querySelector('input').value;
    const destroyed = row.children[4].querySelector('input').value;

    // Save the data in the equipment object
    updatedData.equipment[equipmentType] = [allocated, active, damaged, destroyed];
  });

  fetch('/update_formation', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(updatedData),
  })
  .then(response => response.json())
  .then(result => {
    console.log('Formation updated:', result);
  })
  .catch(error => console.error('Error updating formation:', error));
});
</script>
<script src=" https://cdn.jsdelivr.net/npm/milsymbol@2.2.0/dist/milsymbol.min.js "></script>
<script src="https://cdn.tailwindcss.com"></script>
</html>
