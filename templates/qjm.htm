<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>OPORD-QJM Simulation UI</title>
  <link href="https://cdn.jsdelivr.net/npm/daisyui@4.11.1/dist/full.min.css" rel="stylesheet" type="text/css" />
  <link rel="stylesheet" href="node_modules/modern-normalize/modern-normalize.css">
  <link href="https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.css" rel="stylesheet" />
  <style>
    .draggable {
      cursor: grab;
    }
    .droppable {
      border: 2px dashed #ccc;
      padding: 10px;
      min-height: 100px;
    }
    .accepts-drop {
      border: 2px dashed #15803d;
    }
    .factions-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 10px;
    }
    .tree-list {
      list-style-type: none;
      padding-left: 0;
    }
    
    .node {
        margin: 5px 0;
        cursor: pointer;
    }
    
    .children-list {
        list-style-type: none;
        padding-left: 20px; /* Indent child nodes */
    }

    /* Ensure the page fits the window */
    html, body {
      height: 100%;
      margin: 0;
    }

    .flex.h-screen {
      height: 100vh;
    }

    .flex-grow.p-4 {
      overflow: auto;
    }

  </style>
  <script src="https://d3js.org/d3.v7.min.js"></script>
</head>
<body onload="init()">
<div class="navbar bg-base-100">
    <a class="btn btn-ghost text-xl" href="/">OPORD-QJM Simulation UI</a>
</div>
<div class="flex h-screen">
    <!-- Sidebar -->
    <aside class="w-64 bg-neutral shadow-lg p-4">
      <h2 class="text-lg font-bold mb-4">Admin Controls</h2>
      
      <!-- Date Picker -->
      <label class="form-control mb-4">
        <div class="label">
          <span class="label-text text">Date:</span>
        </div>
        <input type="date" id="battle_date" class="input input-bordered w-full" value="{{ battle_date }}"/>
        <input type="time" id="battle_time" class="input input-bordered w-full" value="08:00"/>
      </label>
      <button class="btn btn-primary w-full mb-4" disabled>Ammunition Resupply</button>
      <button class="btn btn-primary w-full mb-4" disabled>Casualty Replacement</button>
      <button class="btn btn-primary w-full mb-4" onclick="exportOrbatMapper()">Export to OrbatMapper</button>
      <button class="btn btn-primary w-full mb-4" onclick="saveState()">Save Scenario</button>
      <button id="snapshotButton" class="btn btn-primary w-full mb-4">Take Snapshot</button>
    </aside>
  <!-- Main Content -->
  <div class="flex-grow p-4">
  <div class="md:container md:mx-auto">
    <div role="tablist" class="tabs tabs-bordered">
      <input type="radio" name="qjm_steps" role="tab" class="tab" aria-label="A. Attacking & Defending Units" checked/>
      <div role="tabpanel" class="tab-content p-10">
        <div class="container px-4 grid grid-cols-3">
          <div id="unit-tree-container" class="droppable m-4 flex-auto">Available Units</div>
          <div id="attackers" class="droppable m-4 flex-auto">Attackers</div>
          <div id="defenders" class="droppable m-4 flex-auto">Defenders</div>
        </div>
      </div>

      <input type="radio" name="qjm_steps" role="tab" class="tab" aria-label="B. Air Support Sorties" />
      <div role="tabpanel" class="tab-content p-10">
        <h2 class="mb-4 text-2xl font-extrabold leading-none tracking-tight text-gray-900 dark:text-white pt-4">Available Aircraft</h2>
        <div id="air_factions" class="factions-grid"></div>
        <h2 class="mb-4 text-2xl font-extrabold leading-none tracking-tight text-gray-900 dark:text-white pt-4">Units in Combat</h2>
        <div class="container px-4 grid grid-cols-2">
          <div id="air_attackers" class="droppable m-4 flex-auto">Attackers</div>
          <div id="air_defenders" class="droppable m-4 flex-auto">Defenders</div>
        </div>
      </div>

      <input type="radio" name="qjm_steps" role="tab" class="tab" aria-label="C. Environmental Variables" />
      <div role="tabpanel" class="tab-content p-10">
        <h2 class="mb-4 text-2xl font-extrabold leading-none tracking-tight text-gray-900 dark:text-white pt-4">Battle Environment Factors</h2>
        <label class="form-control w-full max-w-md">
          <div class="label">
            <span class="label-text">Terrain Type:</span>
          </div>
          <select class="select select-bordered" id="terrain">
            <option>Rugged - Heavily Wooded</option>
            <option>Rugged - Mixed</option>
            <option>Rugged - Bare</option>
            <option>Rolling- Heavily Wooded</option>
            <option>Rolling - Mixed</option>
            <option>Rolling - Bare</option>
            <option>Flat - Heavily Wooded</option>
            <option>Flat - Mixed</option>
            <option>Flat - Bare, hard</option>
            <option>Flat Desert</option>
            <option>Rolling Dunes</option>
            <option>Swamp - Jungled</option>
            <option>Swamp - mixed or open</option>
            <option>Urban</option>
          </select>
        </label>
        <label class="form-control w-full max-w-md">
          <div class="label">
            <span class="label-text">Season:</span>
          </div>
          <select class="select select-bordered" id="Season">
            <optgroup label="Temperate">
              <option>Spring - Temperate</option>
              <option>Summer - Temperature</option>
              <option>Fall - Temperate</option>
              <option>Winter - Temperate</option>
            </optgroup>
            <optgroup label="Desert">
              <option>Spring - Desert</option>
              <option>Summer - Desert</option>
              <option>Fall - Desert</option>
              <option>Winter - Desert</option>
            </optgroup>
            <optgroup label="Jungle">
              <option>Spring - Jungle</option>
              <option>Summer - Jungle</option>
              <option>Fall - Jungle</option>
              <option>Winter - Jungle</option>
            </optgroup>
          </select>
        </label>
        <label class="form-control w-full max-w-md">
          <div class="label">
            <span class="label-text">Weather:</span>
          </div>
          <select class="select select-bordered" id="weather">
            <option>Dry - Sunshine- Extreme Heat</option>
            <option>Dry - Sunshine - Temperate</option>
            <option>Dry - Sunshine - Extreme Cold</option>
            <option>Dry - Overcast - Extreme Heat</option>
            <option>Dry - Overcast - Temperate</option>
            <option>Dry - Overcast - Extreme Cold</option>
            <option>Wet - Light - Extreme Heat</option>
            <option>Wet - Light - Temperate</option>
            <option>Wet - Light - Extreme Cold</option>
            <option>Wet - Heavy - Extreme Heat</option>
            <option>Wet - Heavy - Temperate</option>
            <option>Wet - Heavy - Extreme Cold</option>
          </select>
        </label>
        <label class="form-control w-full max-w-md">
          <div class="label">
            <span class="label-text">River:</span>
          </div>
          <select class="select select-bordered" id="riverObstacle">
            <option value="none">No</option>
            <optgroup label="Fordable">
              <option value="fordable 20">Fordable (20 m)</option>
              <option value="fordable 50">Fordable (50 m)</option>
              <option value="fordable 100">Fordable (100 m)</option>
              <option value="fordable 500">Fordable (500 m)</option>
            </optgroup>
            <optgroup label="Unfordable">
              <option value="unfordable 20">Unfordable (20 m)</option>
              <option value="unfordable 50">Unfordable (50 m)</option>
              <option value="unfordable 100">Unfordable (100 m)</option>
              <option value="unfordable 500">Unfordable (500 m)</option>
            </optgroup>
          </select>
        </label>
        <label class="form-control w-full max-w-md">
          <div class="label">
            <span class="label-text">Minefield (density/km of front):</span>
          </div>
          <select class="select select-bordered" id="mineObstacle">
            <option value="none">No</option>
            <option>10</option>
            <option>20</option>
            <option>50</option>
            <option>100</option>
            <option>500</option>
          </select>
        </label>
        <label class="form-control w-full max-w-md">
          <div class="label">
            <span class="label-text">Shoreline Fires:</span>
          </div>
          <select class="select select-bordered" id="shorelineFires">
            <option>No shoreline</option>
            <option>Small Arms (up to 1,000 m from shore)</option>
            <option>Light Artillery (up to 10,000 m from shore)</option>
            <option>Medium Artillery (up to 15,000 m from shore)</option>
          </select>
        </label>
        <label class="form-control w-full max-w-md">
          <div class="label">
            <span class="label-text">Shoreline Type:</span>
          </div>
          <select class="select select-bordered" id="shorelineType">
            <option>No shoreline</option>
            <option>Across Beach</option>
            <option>Across Major Unfordable River</option>
            <option>Across Major Fordable or Minor Unfordable River</option>
          </select>
        </label>
      </div>

      <input type="radio" name="qjm_steps" role="tab" class="tab" aria-label="D. Force Variables" />
      <div role="tabpanel" class="tab-content p-10">
        <h2 class="mb-4 text-2xl font-extrabold leading-none tracking-tight text-gray-900 dark:text-white pt-4">Force Variables</h2>
        <label class="form-control w-full max-w-md">
          <div class="label">
            <span class="label-text">Defender Posture:</span>
          </div>
          <select class="select select-bordered" id="posture">
            <option>Hasty Defense</option>
            <option>Prepared Defense</option>
            <option>Fortified Defense</option>
            <option>Delay</option>
            <option>Withdrawal</option>
            <option>Meeting Engagement</option>
          </select>
        </label>
        <div class="w-full max-w-md inline-flex">
          <label class="form-control">
          <div class="label">
            <span class="label-text">Defender Frontage (km):</span>
          </div>
          <input type="number" id="defFrontage" min="1" max="5000" value="1" class="input input-bordered max-w-32" onchange="getPersonnelCount()"/>
        </label>
        <div class="flex w-full max-w-16"></div>
        <label class="form-control">
        <div class="label">
          <span class="label-text">Defender Density:</span>
        </div>
        <input id="defDensity" class="input input-bordered max-w-32" disabled />
      </label>
        </div>
        <label class="form-control w-full max-w-md">
          <div class="label">
            <span class="label-text">Attacker Air Situation:</span>
          </div>
          <select class="select select-bordered" id="airsuperiority">
            <option>Air Superiority</option>
            <option>Air Parity</option>
            <option>Air Inferiority</option>
          </select>
        </label>
        <label class="form-control w-full max-w-md">
          <div class="label">
            <span class="label-text">Attacker Level of Surprise:</span>
          </div>
          <select class="select select-bordered" id="atksurprise">
            <option>No Surprise</option>
            <option>Minor Surprise</option>
            <option>Substantial Surprise</option>
            <option>Complete Surprise</option>
          </select>
        </label>
        <label class="form-control w-full max-w-md">
          <div class="label">
            <span class="label-text">Attacker Days Since Surprise:</span>
          </div>
          <input type="range" min="0" max="3" value="0" class="range" step="1" id="atksurprisedays" />
          <div class="w-full flex justify-between text-xs px-2">
            <span>0</span>
            <span>1</span>
            <span>2</span>
            <span>3+</span>
          </div>
        </label>
        <label class="form-control w-full max-w-md">
          <div class="label">
            <span class="label-text">Attacker CEV Adjustment:</span>
            <span class="label-text" id="atkcevdisplay">1.0</span>
          </div>
          <input type="range" min="0" max="2" value="1" class="range" step="0.1" id="atkcev" onchange="updateCevDisplay()" />
          <div class="w-full flex justify-between text-xs px-2">
            <span>0.0</span>
            <span>0.5</span>
            <span>1.0</span>
            <span>1.5</span>
            <span>2.0</span>
          </div>
        </label>
        <label class="form-control w-full max-w-md">
          <div class="label">
            <span class="label-text">Defender CEV Adjustment:</span>
            <span class="label-text" id="defcevdisplay">1.0</span>
          </div>
          <input type="range" min="0" max="2" value="1" class="range" step="0.1" id="defcev" onchange="updateCevDisplay()" />
          <div class="w-full flex justify-between text-xs px-2">
            <span>0.0</span>
            <span>0.5</span>
            <span>1.0</span>
            <span>1.5</span>
            <span>2.0</span>
          </div>
        </label>
      </div>

      <input type="radio" name="qjm_steps" role="tab" class="tab" aria-label="E. Operational Variables" />
      <div role="tabpanel" class="tab-content p-10">
        <label class="form-control w-full max-w-md">
          <div class="label">
            <span class="label-text">Road Quality:</span>
          </div>
          <input type="range" min="0.6" max="1" value="1" class="range" step="0.1" id="roadQuality" />
          <div class="w-full flex justify-between text-xs px-2">
            <span>Poor</span>
            <span>Mediocre</span>
            <span>Good</span>
          </div>
        </label>
        <label class="form-control w-full max-w-md">
          <div class="label">
            <span class="label-text">Road Density:</span>
          </div>
          <input type="range" min="0.6" max="1" value="1" class="range" step="0.1" id="roadDensity" />
          <div class="w-full flex justify-between text-xs px-2">
            <span>Sparse</span>
            <span>Moderate</span>
            <span>Good</span>
          </div>
        </label>
        <div class="w-full flex text-xs">
          <label class="form-control w-full max-w-md">
            <div class="label">
              <span class="label-text">Battle Duration:</span>
              <span class="label-text" id="battleDurationLabel">24 hrs</span>
            </div>
            <input type="range" min="4" max="24" value="24" class="range" step="1" id="battleDuration" 
            oninput="document.getElementById('battleDurationLabel').innerText = document.getElementById('battleDuration').value + ' hrs';"/>
            <div class="w-full flex justify-between text-xs px-2">
              <span>4 hrs</span>
              <span>8 hrs</span>
              <span>12 hrs</span>
              <span>16 hrs</span>
              <span>20 hrs</span>
              <span>24 hrs</span>
            </div>
          </label>
        </div>
        <div class="w-full flex text-xs">
          <button class="btn btn-success m-2" onclick="sendData();battleResultsModal.showModal()">Simulate</button>
        </div>
      </div>

      <input type="radio" name="qjm_steps" role="tab" class="tab" aria-label="F. Map" />
      <div role="tabpanel" class="tab-content p-10">
        <h2 class="mb-4 text-2xl font-extrabold">Map Interface</h2>
        <div class="flex">
          <!-- Units List -->
          <div id="map-units-list" class="m-4" style="width: 20%;">
            <ul class="tree-list">
            </ul>
          </div>
          <!-- Map Container -->
          <div id="map" class="flex-auto" style="width: 80%; height: 70vh;"></div>
        </div>
      </div>
    </div>
  </div>
  </div>
</div>
<!-- Formation data modal -->
<dialog id="formationModal" class="modal">
  <div class="modal-box w-11/12 max-w-5xl">
    <h3 class="text-lg font-bold mb-4">Formation Details</h3>
    <div id="formationDetails" class="space-y-2">
      <!-- Formation details will be populated here -->
    </div>
    <div class="flex justify-end mt-4">
      <form method="dialog">
        <button id="saveChanges" class="btn btn-success">Save Changes</button>
        <button id="closeModal" class="btn btn-neutral ml-2">Close</button>
      </form>
    </div>
  </div>
</dialog>

<!-- Battle data modal -->
<dialog id="battleResultsModal" class="modal">
  <div class="modal-box w-11/12 max-w-5xl">
    <h3 class="text-lg font-bold mb-4">Battle Results</h3>
    <div id="battleResultsContent" class="space-y-2">
      <!-- Formation details will be populated here -->
    </div>
    <div class="flex justify-end mt-4">
      <form method="dialog">
        <button id="saveChanges" class="btn btn-success" onclick="sendData(true)">Commit Results</button>
        <button id="closeModal" class="btn btn-failure ml-2">Cancel</button>
      </form>
    </div>
  </div>
</dialog>


<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>
<script src="{{ url_for('static', filename='qjm_tree.js') }}"></script>
<script src="{{ url_for('static', filename='qjm_data.js') }}"></script>
<script src="{{ url_for('static', filename='qjm_units.js') }}"></script>
<script src="https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.js"></script>
<script>
var map; // Declare map globally

async function init() {
  await initTree();
  initMap();
  await initAirUnits();
  setupDragDrop();
  // Add event listener for date change
  document.getElementById('battle_date').addEventListener('change', handleDateChange);
}

function handleDateChange(event) {
  const selectedDate = event.target.value;
  fetch(`/get_snapshots/${selectedDate}`)
    .then(response => response.json())
    .then(data => {
      // Clear existing markers
      
      //Object.values(mapUnits).forEach(marker => marker.remove());
      //mapUnits = {};
      console.log(data);

      // Place units at their snapshot locations
      data.formations.forEach(formation => {
        if (mapUnits[formation.id]) {
          mapUnits[formation.id].remove();
          delete mapUnits[formation.id];
        }
        if (formation.location) {
          getFormationById(formation.id)
            .then(unit => {
              // Create marker with existing functionality
              const markerEl = document.createElement('div');
              markerEl.dataset.unitId = formation.id;
              if (unit.sidc) {
                const symbol = new ms.Symbol(unit.sidc, { size: 25, uniqueDesignation: unit.shortname });
                const canvas = symbol.asCanvas();
                const iconURL = canvas.toDataURL();
                markerEl.style.backgroundImage = `url(${iconURL})`;
                const size = symbol.getSize();
                markerEl.style.width = size.width + 'px';
                markerEl.style.height = size.height + 'px';
              } else {
                markerEl.style.width = '20px';
                markerEl.style.height = '20px';
                markerEl.style.backgroundColor = '#FF0000';
                markerEl.style.borderRadius = '50%';
              }
              markerEl.style.cursor = 'grab';
  
              // Create marker and add to map
              const marker = new maplibregl.Marker({ element: markerEl, draggable: true })
                .setLngLat([formation.location.lng, formation.location.lat])
                .addTo(map);
  
              // Add right-click to remove
              marker.getElement().addEventListener('contextmenu', (event) => {
                event.preventDefault();
                marker.remove();
                delete mapUnits[formation.id];
              });
  
              mapUnits[formation.id] = marker;
            });
        }
      });
    })
    .catch(error => console.error('Error fetching snapshots:', error));
}

function updateCevDisplay() {
  document.getElementById('atkcevdisplay').innerText = document.getElementById('atkcev').value;
  document.getElementById('defcevdisplay').innerText = document.getElementById('defcev').value;
};

document.getElementById('saveChanges').addEventListener('click', () => {
  // Gather updated formation data and send it to the server
  const updatedData = {
    name: document.getElementById('formationName').value,
    faction: document.getElementById('formationFaction').value,
    personnel: document.getElementById('formationPersonnel').value,
    equipment: {}
  };

  // Get all rows of the equipment table
  const equipmentRows = document.querySelectorAll('#formationDetails table tbody tr');
  
  equipmentRows.forEach(row => {
    const equipmentType = row.children[0].textContent; // Get the equipment type (first cell)
    
    // Gather the input values (allocated, active, damaged, destroyed)
    const allocated = row.children[1].querySelector('input').value;
    const active = row.children[2].querySelector('input').value;
    const damaged = row.children[3].querySelector('input').value;
    const destroyed = row.children[4].querySelector('input').value;

    // Save the data in the equipment object
    updatedData.equipment[equipmentType] = [allocated, active, damaged, destroyed];
  });

  fetch('/update_formation', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(updatedData),
  })
  .then(response => response.json())
  .then(result => {
    console.log('Formation updated:', result);
  })
  .catch(error => console.error('Error updating formation:', error));
});

document.getElementById('snapshotButton').addEventListener('click', function() {
    const battleDate = document.getElementById('battle_date').value;
    const unitLocations = captureUnitLocations();
    console.log(unitLocations);
    fetch('/snapshot', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ date: battleDate, unitLocations: unitLocations })
    })
    .then(response => response.json())
    .then(data => {
        if(data.status === 'success') {
            alert('Snapshot taken successfully!');
        } else {
            alert('Failed to take snapshot.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred.');
    });
});


// Global variable to store map units
var mapUnits = {};

// Initialize Maplibre map
function initMap() {
  map = new maplibregl.Map({
    container: 'map',
    style: {
      "version": 8,
      "sources": {
        "osm-tiles": {
          "type": "raster",
          "tiles": [
            "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
            "https://b.tile.openstreetmap.org/{z}/{x}/{y}.png",
            "https://c.tile.openstreetmap.org/{z}/{x}/{y}.png"
          ],
          "tileSize": 256,
          "attribution": '© OpenStreetMap contributors'
        }
      },
      "glyphs": "http://fonts.openmaptiles.org/{fontstack}/{range}.pbf",
      "layers": [
        {
          "id": "osm-tiles",
          "type": "raster",
          "source": "osm-tiles",
          "minzoom": 0,
          "maxzoom": 19
        }
      ]
    },
    center: [0, 0],
    zoom: 2
  });


  // Handle drop event
  map.on('load', () => {
    map.getCanvas().addEventListener('dragover', (e) => {
      e.preventDefault();
    });

    map.getCanvas().addEventListener('drop', (e) => {
      e.preventDefault();
      const unitId = e.dataTransfer.getData('unitId');
      console.log('Dropped unit ID:', unitId);
      const sidc = e.dataTransfer.getData('sidc');
      const shortname = e.dataTransfer.getData('shortname');
      const rect = map.getCanvas().getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const lngLat = map.unproject([x, y]);

      if (mapUnits[unitId]) {
        alert('Unit is already on the map.');
        return;
      }

      // Generate MilSymbol icon if SIDC is available
      let iconURL = '';
      let size;
      if (sidc) {
        const symbol = new ms.Symbol(sidc, { size: 25, uniqueDesignation: shortname });
        const canvas = symbol.asCanvas()
        iconURL = canvas.toDataURL();
        size = symbol.getSize();
      }

      // Create marker element
      const markerEl = document.createElement('div');
      markerEl.dataset.unitId = unitId; // Add this line
      if (iconURL) {
        markerEl.style.backgroundImage = `url(${iconURL})`;
        markerEl.style.width = size.width + 'px';
        markerEl.style.height = size.height + 'px'; // Increased height to accommodate icon
        markerEl.style.backgroundSize = 'contain';
        markerEl.style.cursor = 'grab';
      } else {
        // Fallback if SIDC is not available
        markerEl.style.width = '20px';
        markerEl.style.height = '20px';
        markerEl.style.backgroundColor = '#FF0000';
        markerEl.style.borderRadius = '50%';
        markerEl.style.cursor = 'grab';
      }

      // Create marker with the element
      const marker = new maplibregl.Marker({ element: markerEl, draggable: true, anchor: 'center' })
        .setLngLat(lngLat)
        .addTo(map);

      // Right-click to remove
      marker.getElement().addEventListener('contextmenu', (event) => {
        event.preventDefault();
        marker.remove();
        delete mapUnits[unitId];
      });

      // Store marker
      mapUnits[unitId] = marker;
      
      // Add drag events for the marker
      marker.on('dragstart', () => {
        window.dragStart = marker.getLngLat();
      });
      marker.on('drag', () => {
        const newLoc = marker.getLngLat();
        const lineDistance = measureDistance(window.dragStart, newLoc).toFixed(1) + ' km';
        const midLng = (window.dragStart.lng + newLoc.lng) / 2;
        const midLat = (window.dragStart.lat + newLoc.lat) / 2;
        map.getSource('dragLineSource').setData({
          type: 'FeatureCollection',
          features: [
            {
              type: 'Feature',
              geometry: {
                type: 'LineString',
                coordinates: [
                  [window.dragStart.lng, window.dragStart.lat],
                  [newLoc.lng, newLoc.lat]
                ]
              }
            },
            {
              type: 'Feature',
              properties: { distance: lineDistance },
              geometry: {
                type: 'Point',
                coordinates: [midLng, midLat]
              }
            }
          ]
        });
      });
      marker.on('dragend', () => {
        map.getSource('dragLineSource').setData({ type: 'FeatureCollection', features: [] });
      });
    });
    
    // Add a GeoJSON source and a line layer to the map to represent the ruler
    map.addSource('dragLineSource', {
      type: 'geojson',
      data: {
        type: 'FeatureCollection',
        features: []
      }
    });
    map.addLayer({
      id: 'dragLineLayer',
      type: 'line',
      source: 'dragLineSource',
      paint: {
        'line-color': '#FF0000',
        'line-width': 2
      }
    });
    // Add symbol layer for distance label
    map.addLayer({
      id: 'dragLineLabelLayer',
      type: 'symbol',
      source: 'dragLineSource',
      layout: {
        'text-font': ['Open Sans Bold'],
        'text-field': ['get', 'distance'],
        'text-size': 14,
        'text-offset': [0, 0]
      },
      paint: {
        'text-color': '#FF0000',
        'text-halo-color': '#FFFFFF',
        'text-halo-width': 2
      }
    });
  });
}

// Haversine formula for distance in kilometers
function measureDistance(coord1, coord2) {
  const R = 6371; // Earth radius in km
  const dLat = (coord2.lat - coord1.lat) * Math.PI / 180;
  const dLng = (coord2.lng - coord1.lng) * Math.PI / 180;
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(coord1.lat * Math.PI / 180) * Math.cos(coord2.lat * Math.PI / 180) *
            Math.sin(dLng/2) * Math.sin(dLng/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}

// Create a draggable icon element (if needed elsewhere)
function createDraggableIcon(iconURL) {
  const el = document.createElement('div');
  el.style.backgroundImage = `url(${iconURL})`;
  el.style.width = '60px';
  el.style.height = '60px';
  el.style.backgroundSize = '100%';
  el.style.cursor = 'grab';
  return el;
}

// Function to capture unit locations before taking a snapshot
function captureUnitLocations() {
  const units = Object.values(mapUnits); // Retrieve units on the map
  // Log the IDs of each unit for testing
  console.log('Unit IDs:', units.map(unit => unit.getElement().dataset.unitId));
  const unitLocations = units.map(unit => ({
    id: unit.getElement().dataset.unitId, // Each unit element has a data attribute for unit ID
    coordinates: unit.getLngLat() // Get the coordinates of the unit
  }));
  return unitLocations;
}

// Function to get unit information by id
function getFormationById(formationId) {
  return fetch('/get_formation/' + formationId) // Return the promise
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to fetch formation data');
      }
      return response.json(); // Parse the JSON data
    })
    .catch(error => {
      console.error(error); // Log the error
      throw error; // Rethrow the error to let the caller handle it
    });
}

</script>
<script src=" https://cdn.jsdelivr.net/npm/milsymbol@2.2.0/dist/milsymbol.min.js "></script>
<script src="https://cdn.tailwindcss.com"></script>
</html>
